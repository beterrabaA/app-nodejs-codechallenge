services:
  antifraud:
    build:
      context: antifraud-service
      dockerfile: Dockerfile
    container_name: app_antifraud
    depends_on:
      - transaction
      - broker
    networks:
      - broker-network

  transaction:
    container_name: app_transaction
    hostname: transaction
    build:
      context: transaction-service
      dockerfile: Dockerfile
    depends_on:
      database_pg:
        condition: service_healthy
      broker:
        condition: service_healthy
    # env_file: transaction-service/.env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PORT=${PORT}
      - KAFKAJS_NO_PARTITIONER_WARNING=1
    ports:
      - ${PORT}:4000
    networks:
      - prisma-network
      - broker-network

  database_pg:
    image: postgres:17.3
    hostname: database_pg
    container_name: app_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 3s
      timeout: 5s
      retries: 10
    ports:
      - ${POSTGRES_PORT}:5432
    # env_file: transaction-service/.env
    environment:
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data
    networks:
      - prisma-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: app_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - broker-network
    ports:
      - 2181:2181

  broker:
    image: confluentinc/cp-kafka:7.8.0
    hostname: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    container_name: app_broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://:9092,OUTSIDE://:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,OUTSIDE://host.docker.internal:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
    healthcheck:
      test: kafka-topics --bootstrap-server broker:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - 9092:9092
      - 9094:9094
    networks:
      - broker-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - broker
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: "Local Kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "broker:9092"
    networks:
      - broker-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: app_dbpage
    environment:
      PGADMIN_DEFAULT_EMAIL: "beterraba@gmail.com"
      PGADMIN_DEFAULT_PASSWORD: "password"
    ports:
      - "16543:80"
    depends_on:
      - database_pg
    networks:
      - prisma-network

volumes:
  postgres_data: # Define a named volume for persistent data

networks:
  prisma-network:
    name: prisma-network
  broker-network:
    name: broker-network
